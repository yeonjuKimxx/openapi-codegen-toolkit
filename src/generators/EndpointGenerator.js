#!/usr/bin/env node

/**
 * üì° EndpointGenerator - Endpoint ÌååÏùº ÏÉùÏÑ±Í∏∞
 *
 * endpoint.ts ÌååÏùºÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * generateEndpointsByTags.jsÏùò ÌïµÏã¨ Î°úÏßÅÏùÑ ÌÅ¥ÎûòÏä§ÌôîÌñàÏäµÎãàÎã§.
 *
 * @description
 * - API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÉÅÏàò ÏÉùÏÑ± (GET_USERS, POST_USER Îì±)
 * - ÎèôÏ†Å Í≤ΩÎ°ú Ìó¨Ìçº Ìï®Ïàò ÏÉùÏÑ±
 * - ÌÉúÍ∑∏Î≥Ñ Í∑∏Î£πÌôî
 */

import { readFileSync } from 'fs'

/**
 * EndpointGenerator ÌÅ¥ÎûòÏä§
 */
export class EndpointGenerator {
	/**
	 * @param {Object} config - ÏÑ§Ï†ï Í∞ùÏ≤¥
	 * @param {Object} pathResolver - PathResolver Ïù∏Ïä§ÌÑ¥Ïä§
	 * @param {Object} importResolver - ImportResolver Ïù∏Ïä§ÌÑ¥Ïä§
	 * @param {Object} naming - NamingConventions Ïù∏Ïä§ÌÑ¥Ïä§
	 */
	constructor(config, pathResolver, importResolver, naming) {
		this.config = config
		this.pathResolver = pathResolver
		this.importResolver = importResolver
		this.naming = naming
	}

	/**
	 * ÏÑúÎ≤ÑÏùò endpoint.ts ÏÉùÏÑ±
	 *
	 * @param {string} serverName - ÏÑúÎ≤Ñ Ïù¥Î¶Ñ
	 * @param {string} tagName - ÌÉúÍ∑∏ Ïù¥Î¶Ñ
	 * @returns {string} ÏÉùÏÑ±Îêú ÌååÏùº ÎÇ¥Ïö©
	 */
	generate(serverName, tagName) {
		// schemaÏóêÏÑú Í≤ΩÎ°ú Ï∂îÏ∂ú
		const schemaPath = this.pathResolver.getSchemaPath(serverName)
		const schemaContent = readFileSync(schemaPath, 'utf-8')

		const paths = this.extractPathsFromSchema(schemaContent, serverName, tagName)

		return this.generateEndpointFile(serverName, tagName, paths)
	}

	/**
	 * SchemaÏóêÏÑú Í≤ΩÎ°ú Ï∂îÏ∂ú
	 */
	extractPathsFromSchema(schemaContent, serverName, tagName) {
		const pathsData = []

		try {
			const pathsMatch = schemaContent.match(/export interface paths\s*\{([\s\S]*?)(?=\nexport interface)/)
			if (!pathsMatch) return pathsData

			const pathsBlock = pathsMatch[1]
			const pathRegex = /['"]([^'"]+)['"]:\s*\{([\s\S]*?)\n(?:\t| {4})\}/g
			let pathMatch

			while ((pathMatch = pathRegex.exec(pathsBlock)) !== null) {
				const [_, path, pathDetails] = pathMatch

				const extractedTag = this.naming.extractTagFromPath(path)
				if (extractedTag !== tagName) continue

				// operations Ï∞∏Ï°∞Î•º Ï∞æÏïÑÏÑú Ïã§Ï†ú Ï†ïÏùòÎêú Î©îÏÑúÎìúÎßå Ï∂îÏ∂ú
				const methodRegex = /(get|post|put|patch|delete)\??:\s*operations\[['"]([^'"]+)['"]\]/gi
				let methodMatch

				while ((methodMatch = methodRegex.exec(pathDetails)) !== null) {
					const method = methodMatch[1].toLowerCase()
					const isDynamic = path.includes('{')
					const constantName = this.naming.generateConstantName(path, method)

					pathsData.push({
						path,
						method,
						constantName,
						functionName: constantName,
						isDynamic,
						tag: tagName,
					})
				}
			}
		} catch (error) {
			console.error(`‚ùå ${serverName} Í≤ΩÎ°ú Ï∂îÏ∂ú Ïò§Î•ò:`, error.message)
		}

		return pathsData
	}

	/**
	 * Endpoint ÌååÏùº ÏÉùÏÑ± (event-stepin-ai ÌòïÏãù)
	 */
	generateEndpointFile(serverName, tagName, paths) {
		const serverUpper = serverName.toUpperCase()
		const tagUpper = this.naming.tagToIdentifier(tagName)

		const staticPaths = paths.filter((p) => !p.isDynamic)
		const dynamicPaths = paths.filter((p) => p.isDynamic)

		const header = `/**
 * üî∏ ${serverUpper} API
 *
 * ÏûêÎèô ÏÉùÏÑ±Îêú ÌååÏùºÏûÖÎãàÎã§. ÏàòÏ†ïÌïòÏßÄ ÎßàÏÑ∏Ïöî.
 * ÏûêÎèô ÏÉùÏÑ±Îêú ÌååÏùº - ÏßÅÏ†ë ÏàòÏ†ïÌïòÏßÄ ÎßàÏÑ∏Ïöî
 */

// === üì° ${serverUpper} API ÏóîÎìúÌè¨Ïù∏Ìä∏ ===
`

		let apiSection = ''
		if (staticPaths.length > 0) {
			apiSection = `
export const ${serverUpper}_API = {
\t// ${tagName} Ïπ¥ÌÖåÍ≥†Î¶¨ (${staticPaths.length}Í∞ú)
\t${tagUpper}: {
${staticPaths.map(p => `\t\t/** ${p.method.toUpperCase()} ${p.path} */\n\t\t${p.constantName}: '${p.path}' as const,`).join('\n')}
\t},
} as const
`
		}

		let helpersSection = ''
		if (dynamicPaths.length > 0) {
			helpersSection = `
// === üîß ${serverUpper} API Ìó¨Ìçº ===

export const ${serverUpper}_HELPERS = {
\t// ${tagName} Ïπ¥ÌÖåÍ≥†Î¶¨ (${dynamicPaths.length}Í∞ú)
\t${tagUpper}: {
${dynamicPaths.map(p => {
	const params = p.path.match(/\{([^}]+)\}/g)?.map(m => m.slice(1, -1)) || []
	const paramList = params.map(p => `${p}: string`).join(', ')
	const pathTemplate = p.path.replace(/\{([^}]+)\}/g, '${$1}')
	return `\t\t/** ${p.method.toUpperCase()} ${p.path} */\n\t\t${p.constantName}: (${paramList}) => \`${pathTemplate}\` as const,`
}).join('\n')}
\t},
} as const
`
		} else {
			helpersSection = `
// === üîß ${serverUpper} API Ìó¨Ìçº ===

export const ${serverUpper}_HELPERS = {} as const
`
		}

		return header + apiSection + helpersSection
	}
}

export function createEndpointGenerator(config, pathResolver, importResolver, naming) {
	return new EndpointGenerator(config, pathResolver, importResolver, naming)
}

export default EndpointGenerator
